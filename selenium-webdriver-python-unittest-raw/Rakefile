require 'rubygems'
require 'fileutils'

load File.join(File.dirname(__FILE__), "buildwise.rake")

BUILDWISE_QUICK_PROJECT_ID = "agiletravel-quick-build-python-unittest" 
BUILDWISE_FULL_PROJECT_ID = "agiletravel-full-build-python-unittest"
BUILDWISE_URL = ENV["BUILDWISE_MASTER"] || "http://buildwise.macmini"

FULL_BUILD_MAX_TIME = 60 * 60   # 1 hour
FULL_BUILD_CHECK_INTERVAL = 30  # 1 minute

$test_dir =  File.expand_path( File.join(File.dirname(__FILE__), "tests" ))  # change to aboslution path if invoktion is not this directory

# Preqrueisite
# - Python 3 (make sure python3 is in PATH, Mac built-in python is Python2)
# - unittest selenium installed by pip
# - pip install unittest-xml-reporting
# - pip install nose

desc "run all tests in this folder"
task "ui_tests:quick"  do
  
  ### the below run all test scripts under test folder, but without reporting  
  # 
  # `python -m unittest  discover test -p "*_test.py"`

  ## Runing individually
  #
  # specs_for_quick_build.each do |file|
  #   `python #{file}`
  # end
  
  ## Runing with nose
  # 
  reports_dir =  File.join(File.dirname(__FILE__), "reports")
  FileUtils.rm_rf(reports_dir) if File.exists?(reports_dir)
  FileUtils.mkdir_p(reports_dir)
  FileUtils.chdir(File.dirname(__FILE__))
  
  # system("nosetests --with-xunit --xunit-file=reports/TEST-SUITE.xml test")

  # Running with pyTest
  system("pytest --junit-xml=reports/TEST-SUITE.xml test")
end


def specs_for_quick_build
  # list test files to be run in a quick build
  [
    "1_login_test.py", 
    "2_flight_test.py",
    "3_passenger_test.py", 
    "4_payment_test.py",
    "not_exists_test.py"
  ]
end

def excluded_spec_files
  []
end


def determine_specs_for_quick_build  
  specs_to_be_executed = []

  enable_intelligent_ordering = ENV["INTELLIGENT_ORDERING"] && ENV["INTELLIGENT_ORDERING"].to_s == "true"
  puts "[INFO] intelligent ordering? => #{enable_intelligent_ordering}"
  sequential_build_project_identifier = ENV["BUILDWISE_PROJECT_IDENTIFIER"] || "selenium-recipes-python"
  if enable_intelligent_ordering && sequential_build_project_identifier
    ordered_specs = buildwise_ui_test_order(sequential_build_project_identifier)
    puts "[INFO] Execution order based history of quick build: #{ordered_specs.inspect}"
    if ordered_specs.nil? || ordered_specs.compact.empty? || ordered_specs.class != Array
      specs_to_be_executed = specs_for_quick_build.dup if specs_for_quick_build.empty?
    else
      # neat sorting thanks to Ruby
      specs_to_be_executed = ordered_specs.dup 
      specs_to_be_executed = specs_to_be_executed.sort_by{|x| ordered_specs.include?(File.basename(x)) ? ordered_specs.index(File.basename(x)) : specs_to_be_executed.count }    
      puts "[INFO] After intelligent sorting => #{specs_to_be_executed.inspect}"        
    end    
  end

  enable_dyanmic_build_queue = ENV["DYNAMIC_FEEDBACK"] && ENV["DYNAMIC_FEEDBACK"].to_s == "true" && ENV["DYNAMIC_FEEDBACK_PROJECT_IDENTIFIER"]
  puts "[INFO] dynamic feedback? => #{enable_dyanmic_build_queue}"  
  if enable_dyanmic_build_queue
    begin
      # dynamic build process: get failed tests from last failed full build
      failed_full_build_tests = buildwise_failed_build_tests(ENV["DYNAMIC_FEEDBACK_PROJECT_IDENTIFIER"])
      if failed_full_build_tests && failed_full_build_tests.size > 0
        failed_full_build_tests.each do |x|
          full_path = File.join($spec_dir, x)
          specs_to_be_executed.insert(0, full_path) unless specs_to_be_executed.include?(full_path)
        end    
      end
    
    rescue => e
      puts "[ERROR] failed to check for full build: #{e}"
    end
  end

  if specs_to_be_executed.empty?
    specs_to_be_executed = specs_for_quick_build
  else
    specs_left_over = specs_for_quick_build - specs_to_be_executed
    specs_to_be_executed += specs_left_over
    specs_to_be_executed.flatten!
  end
  
  specs_to_be_executed -= excluded_spec_files
  puts "[INFO] After Exclude : #{specs_to_be_executed.inspect}"

  specs_to_be_executed.uniq!
  puts "[INFO] After Uniq : #{specs_to_be_executed.inspect}"

  specs_to_be_executed.reject! {|a_test|  !File.exists?(File.join($test_dir, a_test)) }
  puts "[INFO] Filter out Not exists : #{specs_to_be_executed.inspect}"

  puts "[INFO] Final Test execution in order => #{specs_to_be_executed.inspect}"
  # using full path
  specs_to_be_executed = specs_to_be_executed.collect{|x| File.join($test_dir, x)}  
end

desc "run all tests in this folder"
task "ci:ui_tests:quick" do
    reports_dir = File.join(File.dirname(__FILE__),  "reports")
    FileUtils.rm_rf(reports_dir)if File.exists?(reports_dir)
    FileUtils.mkdir_p(reports_dir)
    
    exit_code = 0

    specs_to_be_executed = determine_specs_for_quick_build();
    specs_to_be_executed.each do |test_file|
      junit_xml = File.expand_path File.join(reports_dir, File.basename(test_file).gsub(".py", ".xml"))
      cmd = "pytest --junitxml=#{junit_xml} #{test_file} "
      puts cmd
      result = system(cmd)
      if exit_code == 0 && !result
        exit_code = -1
      end   
      sleep 0.25
    end
    exit(exit_code)  
end




## Full Build
#
#  TODO - how to determin useing RSpec or Cucumber
#
desc "Running tests in parallel"
task "ci:test:full" do
  build_id = buildwise_start_build(:working_dir => File.expand_path(File.dirname(__FILE__)),
                                   :ui_test_dir => ["tests"],
                                   :excluded => excluded_spec_files || [],
                                   :distributed => true,
                                   :test_framework => "unittest"
  )

  the_build_status = buildwise_build_ui_test_status(build_id)
  start_time = Time.now

  puts "[Rake] Keep checking build |#{build_id} | #{the_build_status}"
  while ((Time.now - start_time ) < FULL_BUILD_MAX_TIME) # test exeuction timeout
    the_build_status = buildwise_build_ui_test_status(build_id)
    if ($last_buildwise_server_build_status != the_build_status)
      puts "[Rake] #{Time.now} Checking build status: |#{the_build_status}|"
      $last_buildwise_server_build_status = the_build_status
    end
    
    if the_build_status == "OK"
      exit 0
    elsif the_build_status == "Failed"
      exit -1
    else 
      sleep FULL_BUILD_CHECK_INTERVAL  # check the build status every minute
    end
  end
  puts "[Rake] Execution UI tests expired"
  exit -2
end
